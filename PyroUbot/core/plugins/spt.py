import asyncio

from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from PyroUbot import *

SUPPORT = []


async def support_callback(client, callback_query):
    user_id = int(callback_query.from_user.id)
    full_name = f"{callback_query.from_user.first_name} {callback_query.from_user.last_name or ''}"
    get = await bot.get_users(user_id)
    await callback_query.message.delete()
    SUPPORT.append(get.id)

    try:
        button = [
            [InlineKeyboardButton("‚ùå  ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥", callback_data=f"batal {user_id}")]
        ]
        pesan = await bot.ask(
            user_id,
            f"<b>‚úçÔ∏è s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç ·¥ò·¥á Ä·¥õ·¥Ä…¥ è·¥Ä·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä: {full_name}</b>",
            reply_markup=InlineKeyboardMarkup(button),
            timeout=90,
        )
    except asyncio.TimeoutError as out:
        if get.id in SUPPORT:
            SUPPORT.remove(get.id)
            return await bot.send_message(get.id, "·¥ò·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s")

    text = f"<b>üí¨ ·¥ò·¥á Ä·¥õ·¥Ä…¥ è·¥Ä·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥õ·¥á Ä·¥ã…™ Ä…™·¥ç: {full_name}</b>"
    buttons = [
        [
            InlineKeyboardButton("üë§ ·¥ò Ä·¥èÍú∞…™ ü", callback_data=f"profil {user_id}"),
            InlineKeyboardButton("·¥ä·¥Ä·¥°·¥Ä ô üí¨", callback_data=f"jawab_pesan {user_id}"),
        ]
    ]

    if get.id in SUPPORT:
        try:
            await pesan.copy(
                OWNER_ID,
                reply_markup=InlineKeyboardMarkup(buttons),
            )
            SUPPORT.remove(get.id)
            await pesan.request.edit(
                f"<b>‚úçÔ∏è s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç ·¥ò·¥á Ä·¥õ·¥Ä…¥ è·¥Ä·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä: {full_name}</b>"
            )
            return await bot.send_message(user_id, text)
        except Exception as error:
            return await bot.send_message(user_id, error)


async def jawab_pesan_callback(client, callback_query):
    user_id = int(callback_query.from_user.id)
    full_name = f"{callback_query.from_user.first_name} {callback_query.from_user.last_name or ''}"
    get = await bot.get_users(user_id)
    user_ids = int(callback_query.data.split()[1])
    SUPPORT.append(get.id)

    try:
        button = [
            [InlineKeyboardButton("‚ùå  ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥", callback_data=f"batal {user_id}")]
        ]
        pesan = await bot.ask(
            user_id,
            f"<b>‚úâÔ∏è s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä: {full_name}</b>",
            reply_markup=InlineKeyboardMarkup(button),
            timeout=300,
        )
    except asyncio.TimeoutError:
        if get.id in SUPPORT:
            SUPPORT.remove(get.id)
            return await bot.send_message(get.id, "·¥ò·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s")

    text = f"<b>‚úÖ ·¥ò·¥ás·¥Ä…¥  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥õ·¥á Ä·¥ã…™ Ä…™·¥ç: {full_name}</b>"

    if not user_ids == OWNER_ID:
        buttons = [[InlineKeyboardButton("üí¨ ·¥ä·¥Ä·¥°·¥Ä ô ·¥ò·¥ás·¥Ä…¥ üí¨", f"jawab_pesan {user_id}")]]
    else:
        buttons = [
            [
                InlineKeyboardButton("üë§ ·¥ò Ä·¥èÍú∞…™ ü", callback_data=f"profil {user_id}"),
                InlineKeyboardButton("·¥ä·¥Ä·¥°·¥Ä ô üí¨", callback_data=f"jawab_pesan {user_id}"),
            ]
        ]

    if get.id in SUPPORT:
        try:
            await pesan.copy(
                user_ids,
                reply_markup=InlineKeyboardMarkup(buttons),
            )
            SUPPORT.remove(get.id)
            await pesan.request.edit(
                f"<b>‚úâÔ∏è s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä: {full_name}</b>",
            )
            await bot.send_message(user_id, text)
        except Exception as error:
            return await bot.send_message(user_id, error)


async def profil_callback(client, callback_query):
    user_id = int(callback_query.data.split()[1])

    try:
        get = await bot.get_users(user_id)
        first_name = f"{get.first_name}"
        last_name = f"{get.last_name}"
        full_name = f"{get.first_name} {get.last_name or ''}"
        username = f"{get.username}"

        msg = (
            f"<b>üë§ <a href=tg://user?id={get.id}>{full_name}</a></b>\n"
            f"<b> ‚î£ …™·¥Ö ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä:</b> <code>{get.id}</code>\n"
            f"<b> ‚î£ …¥·¥Ä·¥ç·¥Ä ·¥Ö·¥á·¥ò·¥Ä…¥:</b> {first_name}\n"
        )

        if last_name != "None":
            msg += f"<b> ‚î£ …¥·¥Ä·¥ç·¥Ä  ô·¥á ü·¥Ä·¥ã·¥Ä…¥…¢…¥ è·¥Ä:</b> {last_name}\n"

        if username != "None":
            msg += f"<b> ‚î£ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:</b> @{username}\n"

        msg += f"<b> ‚îó  ô·¥è·¥õ: {bot.me.mention}\n"
        buttons = [
            [
                InlineKeyboardButton(
                    f"{full_name}",
                    url=f"tg://openmessage?user_id={get.id}",
                )
            ]
        ]

        await callback_query.message.reply_text(
            msg, reply_markup=InlineKeyboardMarkup(buttons)
        )
    except Exception as why:
        await callback_query.message.reply_text(why)


async def batal_callback(client, callback_query):
    user_id = int(callback_query.data.split()[1])

    if user_id in SUPPORT:
        try:
            SUPPORT.remove(user_id)
            await callback_query.message.delete()
            buttons = Button.start(callback_query)
            return await bot.send_message(
                user_id,
                MSG.START(callback_query),
                reply_markup=InlineKeyboardMarkup(buttons),
            )
        except Exception as why:
            await callback_query.message.delete()
            await bot.send_message(user_id, f"<b>‚ùå …¢·¥Ä…¢·¥Ä ü ·¥Ö…™ ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥! {why}</b>")
